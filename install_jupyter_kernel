#!/usr/bin/env python
# Licensed under a 3-clause BSD style license - see LICENSE.rst

from __future__ import print_function

import os
import sys
import glob
import shutil
import argparse

def main():
    parser = argparse.ArgumentParser(
            description='Install a Jupyter kernel for a DESI software version and optionally data release environment')
    parser.add_argument('-v', '--software-version', type=str, required=True,
                        help='DESI software release version')
    parser.add_argument('-r', '--data-release', type=str,
                        help='DESI data release (default use DESI proprietary data)')
    parser.add_argument('-o', '--outdir', type=str,
                        help='Alternate output directory (default $HOME/.local/share/jupyter/kernels)')

    args = parser.parse_args()

    if 'DESIMODULES' in os.environ:
        moduledir = os.environ['DESIMODULES']
    elif 'NERSC_HOST' in os.environ:
        moduledir = os.path.expandvars('/global/common/software/desi/$NERSC_HOST/desiconda/startup/modulefiles/desimodules')
    else:
        # TODO: in principle we could directly get the files from github without needing them on disk
        print('ERROR: please set $DESIMODULES to the location of a https://github.com/desihub/desimodules clone')
        return 1

    release_modulefile = '{moduledir}/{version}'.format(moduledir=moduledir, version=args.software_version)
    if not os.path.exists(release_modulefile):
        print("ERROR: {} doesn't exist; check that dir for available versions".format(
            release_modulefile))
        return 1

    if args.outdir is None:
        outdir = os.path.expandvars('$HOME/.local/share/jupyter/kernels')
    else:
        outdir = args.outdir

    kerneldir = '{outdir}/desi-{release}'.format(outdir=outdir, release=args.software_version)
    if args.data_release is not None:
        kerneldir += '-'+args.data_release

    if os.path.exists(kerneldir):
        print('ERROR: {kerneldir} already exists; not overwriting'.format(kerneldir=kerneldir))
        sys.exit(1)
    else:
        os.makedirs(kerneldir)

    # Select which shell to use
    shell = os.path.basename(os.environ['SHELL'])
    if shell in ('csh', 'tcsh'):
        suffix = 'csh'
    else:
        suffix = 'sh'

    # Create optional release arg for kernel.json file, including quotes and comma
    if args.data_release is not None:
        release_json_str = '"{release}",'.format(release=args.data_release)
    else:
        release_json_str = ''

    display_name = 'DESI '+args.software_version
    if args.data_release is not None:
        display_name += ' '+args.data_release

    # Create the kernel file
    kernelfile = kerneldir+'/kernel.json'
    with open(kernelfile, 'w') as fp:
        fp.write("""{{
 "language": "python",
 "argv": [
  "/global/common/software/desi/activate_desi_jupyter.{suffix}",
  "{version}", {release_json_str}
  "{{connection_file}}"
 ],
 "display_name": "{display_name}"
}}
""".format(suffix=suffix, version=args.software_version, release_json_str=release_json_str, display_name=display_name)
    )

    print('Wrote '+kernelfile)

    #- Copy logo files
    for filename in glob.glob(moduledir+'/logo-*.png'):
        outfile = os.path.join(kerneldir, os.path.basename(filename))
        shutil.copy(filename, outfile)

if __name__ == '__main__':
    sys.exit(main())

